CREATE DATABASE TEST;
USE TEST;
 
-- CREATE THE STUDENT TABLE
CREATE TABLE STUDENT (
    STUD_NO CHAR(7) PRIMARY KEY CHECK (STUD_NO LIKE 'C%'),
    STUD_NAME VARCHAR(50) NOT NULL,
    DEPT_NO INT REFERENCES DEPARTMENT(DEPT_NO),
    YEAR INT NOT NULL,
    SEMESTER INT NOT NULL
);

-- CREATE THE DEPARTMENT TABLE
CREATE TABLE DEPARTMENT (
    DEPT_NO INT PRIMARY KEY,
    DEPT_NAME VARCHAR(50) NOT NULL,
    BUILDING_NO INT NOT NULL
);

-- CREATE THE MEMBERSHIP TABLE
CREATE TABLE MEMBERSHIP (
    MEMBER_NO INT PRIMARY KEY,
    STUD_NO CHAR(7) REFERENCES STUDENT(STUD_NO),
    MEMBER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CREATE THE BOOK TABLE
CREATE TABLE BOOK (
    BOOK_NO INT PRIMARY KEY,
    BOOK_NAME VARCHAR(100) NOT NULL,
    AUTHOR_NAME VARCHAR(50) NOT NULL
);

-- CREATE THE BOOK_ISSUE TABLE
CREATE TABLE BOOK_ISSUE (
    ISSUE_NO INT PRIMARY KEY,
    ISS_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MEMBER_NO INT REFERENCES MEMBERSHIP(MEMBER_NO),
    BOOK_NO INT REFERENCES BOOK(BOOK_NO)
);

-- CREATE THE RETURN_RENEW TABLE
CREATE TABLE RETURN_RENEW (
    MEMBER_NO INT REFERENCES MEMBERSHIP(MEMBER_NO),
    BOOK_NO INT REFERENCES BOOK(BOOK_NO),
    RETURN_DATE DATE,
    RENEW_DATE DATE,
    PRIMARY KEY (MEMBER_NO, BOOK_NO)
);

-- INTERST STUDENTS DATA
INSERT INTO STUDENT (STUD_NO, STUD_NAME, DEPT_NO, YEAR, SEMESTER)
VALUES 
('C033001', 'ALICE SMITH', 101, 2, 1),
('C033002', 'BOB JOHNSON', 102, 3, 2),
('C033003', 'CHARLIE DAVIS', 103, 1, 1),
('C033004', 'DAVID WILSON', 101, 2, 2),
('C033005', 'EMMA JONES', 104, 4, 1),
('C033006', 'FIONA BROWN', 102, 3, 2),
('C033007', 'GEORGE MILLER', 103, 2, 2),
('C033008', 'HANNAH MOORE', 104, 1, 1),
('C033009', 'IAN TAYLOR', 101, 4, 2),
('C033010', 'JANE WHITE', 103, 3, 1);

-- INSERT DEPARTMENT DATA
INSERT INTO DEPARTMENT (DEPT_NO, DEPT_NAME, BUILDING_NO)
VALUES 
(101, 'COMPUTER SCIENCE', 1),
(102, 'ELECTRICAL ENGINEERING', 2),
(103, 'MECHANICAL ENGINEERING', 3),
(104, 'CIVIL ENGINEERING', 4),
(105, 'BIOENGINEERING', 5),
(106, 'PHYSICS', 6),
(107, 'CHEMISTRY', 7),
(108, 'MATHEMATICS', 8),
(109, 'ECONOMICS', 9),
(110, 'PSYCHOLOGY', 10);

-- INSERT MEMBERSHIP DATA
INSERT INTO MEMBERSHIP (MEMBER_NO, STUD_NO, MEMBER_DATE)
VALUES 
(1, 'C033001', '2023-09-01'),
(2, 'C033002', '2023-09-05'),
(3, 'C033003', '2023-09-10'),
(4, 'C033004', '2023-09-15'),
(5, 'C033005', '2023-09-20'),
(6, 'C033006', '2023-09-25'),
(7, 'C033007', '2023-09-30'),
(8, 'C033008', '2023-10-05'),
(9, 'C033009', '2023-10-10'),
(10, 'C033010', '2023-10-15');

-- INSERT BOOK DATA
INSERT INTO BOOK (BOOK_NO, BOOK_NAME, AUTHOR_NAME)
VALUES 
(1001, 'OPERATING SYSTEMS', 'TANENBAUM'),
(1002, 'DATA STRUCTURES', 'MARK ALLEN WEISS'),
(1003, 'DATABASE SYSTEMS', 'ELMASRI'),
(1004, 'INTRODUCTION TO ALGORITHMS', 'CORMEN'),
(1005, 'COMPUTER NETWORKS', 'ANDREW S. TANENBAUM'),
(1006, 'ARTIFICIAL INTELLIGENCE', 'RUSSELL AND NORVIG'),
(1007, 'SOFTWARE ENGINEERING', 'SOMMERVILLE'),
(1008, 'DISCRETE MATHEMATICS', 'ROSEN'),
(1009, 'DIGITAL LOGIC DESIGN', 'MORRIS MANO'),
(1010, 'COMPUTER ORGANIZATION', 'CARL HAMACHER');

-- INSERT BOOK ISSUE DATA
INSERT INTO BOOK_ISSUE (ISSUE_NO, ISS_DATE, MEMBER_NO, BOOK_NO)
VALUES 
(1, '2023-09-10', 1, 1001),
(2, '2023-09-12', 2, 1002),
(3, '2023-09-14', 3, 1003),
(4, '2023-09-16', 4, 1004),
(5, '2023-09-18', 5, 1005),
(6, '2023-09-20', 6, 1006),
(7, '2023-09-22', 7, 1007),
(8, '2023-09-24', 8, 1008),
(9, '2023-09-26', 9, 1009),
(10, '2023-09-28', 10, 1010);

-- INSERT BOOK RENEW DATA
INSERT INTO RETURN_RENEW (MEMBER_NO, BOOK_NO, RETURN_DATE, RENEW_DATE)
VALUES 
(1, 1001, '2023-10-01', '2023-09-25'),
(2, 1002, '2023-10-03', '2023-09-27'),
(3, 1003, '2023-10-05', '2023-09-29'),
(4, 1004, '2023-10-07', '2023-10-01'),
(5, 1005, '2023-10-09', '2023-10-03'),
(6, 1006, '2023-10-11', '2023-10-05'),
(7, 1007, '2023-10-13', '2023-10-07'),
(8, 1008, '2023-10-15', '2023-10-09'),
(9, 1009, '2023-10-17', '2023-10-11'),
(10, 1010, '2023-10-19', '2023-10-13');

----------------------------------
-- MAIN QUERY
----------------------------------

-- 1. List all the student and Book name, Author issued on date (e.g., 01-01-2013)

SELECT STUDENT.STUD_NAME, BOOK.BOOK_NAME, BOOK.AUTHOR_NAME
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
JOIN BOOK ON BOOK_ISSUE.BOOK_NO = BOOK.BOOK_NO
WHERE BOOK_ISSUE.ISS_DATE = '2023-09-10';

-- 2. List the details of students who borrowed book whose author is Tanenbum
SELECT STUDENT.STUD_NO, STUDENT.STUD_NAME
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
JOIN BOOK ON BOOK_ISSUE.BOOK_NO = BOOK.BOOK_NO
WHERE BOOK.AUTHOR_NAME = 'Tanenbum';

-- SOME DUMMY QUERY FOR TEST
-- SELECT * FROM BOOK;
-- DELETE FROM BOOK WHERE BOOK_NO = 1011;
-- UPDATE BOOK SET AUTHOR_NAME = 'Tanenbum' WHERE BOOK_NO = 1001;

-- 3. Give a count of how many books have been borrowed by each student

SELECT STUDENT.STUD_NO, STUDENT.STUD_NAME, COUNT(BOOK_ISSUE.BOOK_NO) AS BORROWED_BOOK
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
GROUP BY STUDENT.STUD_NO;

-- 4. List the students who reached the borrowed limit 3 (i.e., none can borrow more than 3 books)

SELECT STUDENT.STUD_NO, STUDENT.STUD_NAME
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
GROUP BY STUDENT.STUD_NO
HAVING COUNT(BOOK_ISSUE.BOOK_NO) >= 3;

-- 5. List the students who returned the borrowed book after 30 days from his/her issuance. 

SELECT STUDENT.STUD_NO, STUDENT.STUD_NAME
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
JOIN RETURN_RENEW ON BOOK_ISSUE.MEMBER_NO = RETURN_RENEW.MEMBER_NO
WHERE DATEDIFF(RETURN_RENEW.RETURN_DATE, BOOK_ISSUE.ISS_DATE) > 30;

-- 6. Calculate the penalty of each student who exceeds the borrowed period 30 days. Apply 25 Paisa 
-- per day for the penalty. 

SELECT STUDENT.STUD_NO, STUDENT.STUD_NAME, 
DATEDIFF(RETURN_RENEW.RETURN_DATE, BOOK_ISSUE.ISS_DATE) - 30 AS DAYS_LATE, 
(DATEDIFF(RETURN_RENEW.RETURN_DATE, BOOK_ISSUE.ISS_DATE) - 30) * 0.25 AS PENALTY
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
JOIN RETURN_RENEW ON BOOK_ISSUE.MEMBER_NO = RETURN_RENEW.MEMBER_NO
WHERE DATEDIFF(RETURN_RENEW.RETURN_DATE, BOOK_ISSUE.ISS_DATE) > 30;

-- 7. Give a list of books taken by student with stud_no C033002

SELECT BOOK.BOOK_NO, BOOK.BOOK_NAME, BOOK.AUTHOR_NAME
FROM STUDENT
JOIN MEMBERSHIP ON STUDENT.STUD_NO = MEMBERSHIP.STUD_NO
JOIN BOOK_ISSUE ON MEMBERSHIP.MEMBER_NO = BOOK_ISSUE.MEMBER_NO
JOIN BOOK ON BOOK_ISSUE.BOOK_NO = BOOK.BOOK_NO
WHERE STUDENT.STUD_NO = 'C033002';

-- 8. Modify the databases to incorporate a renewal policy for book. add renew_date: date to 
-- return_renew relation and consider the renew_date as the new issue date during penalty 
-- calculation

